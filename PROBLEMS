Problems I have had with rust

1) You cannot have statics with heap allocated memory, even if the inital vaient doesn't have it. IE this is illegal:
    static mut abc : Option<Box<int>> = None;
    pub fn main() {
        unsafe { abc = Some(box 4); }
    }

2) All crates must be purely hierarchical. Annoying since sometimes I have something that is logically seperate
from other code but it needs at least the fact that a certain type exists to be known. IE the TSD Doesn't need
any of the KProc or KThread but it would be nice if it knew how to store a Rc<KProc>.

3) Why does rust optimize out inline asm with -O3!
    Reason is rust has no annotation to require that a non-public method is not stripped, if it's never called.

4) Why does rust not have a crate-private visibility specifier? This would be really useful.

5) Rust seems to believe that on some level everything lives on the stack (i.e. having pointers in static storage
is not easy or plesant.).

6) Rust currently has no support for recovering from (or even detecting) an OOM error. This is actually somewhat
bad since we would like to be able to EG, fail a syscall if we don't have memory. Still this is not a _huge_ deal,
we can just ignore this problem for now. We might end up in the future moving most actual allocation to direct
functions/custom allocators that we could have fail more cleanly.
